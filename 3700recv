#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        self.sequence_nums = [0]
        self.buffer = []

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(str(message) + "\n")
        sys.stderr.flush()

    def update_sequence_nums(self, msg):
        self.sequence_nums.append(msg["sequence_number"])

    def print_message(self, msg):
        # Print out the data to stdout
        print(msg["data"], end='', flush=True)
     

    def is_sequence_num_in_buff(self, sequence_num):
        for msg in self.buffer:
            if sequence_num == msg["sequence_number"]:
                return True
        return False

    def is_duplicate(self, msg):
        return msg["sequence_number"] in self.sequence_nums or self.is_sequence_num_in_buff(msg["sequence_number"])

    def is_out_of_order(self, msg):
        return self.sequence_nums[-1] + 1 != msg["sequence_number"]

    def fix_out_of_order_with_buff(self):
        self.buffer = sorted(self.buffer, key=lambda msg: msg["sequence_number"])
        to_remove = []
        for msg in self.buffer:
            if not self.is_out_of_order(msg):
                self.update_sequence_nums(msg)
                self.print_message(msg)
                to_remove.append(msg)

        for msg in to_remove:
            self.buffer.remove(msg)

    def msg_has_all_attributes(self, msg):
        return 'type' in msg and 'data' in msg and 'sequence_number' in msg and 'checksum' in msg
    
    def msg_has_proper_checksum(self, msg):
        cksum_rec = msg['checksum']
        msg.pop('checksum')
        cksum_calc = sum(json.dumps(msg).encode('utf-8'))
        return cksum_rec == cksum_calc

    def run(self):
        while True:
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))

                if not self.msg_has_all_attributes(msg):
                    continue

                self.log("Received data message %s" % msg)

                if not self.msg_has_proper_checksum(msg):
                    continue

                # Always send ACK
                #TODO : implement checksum for ack
                self.send({ "type": "ack", "num": msg["sequence_number"] })

                # duplicate message, so continue
                if self.is_duplicate(msg):
                    continue
        

                # if out of order message, try to fix ordering using buffer and then see if it is still out of order
                if self.is_out_of_order(msg):
                    self.fix_out_of_order_with_buff()
                    if self.is_out_of_order(msg):
                        self.buffer.append(msg)
                        continue
    
                self.update_sequence_nums(msg)
                self.print_message(msg)

                # try to fix out of order msg again (performance enhancement in practice)
                self.fix_out_of_order_with_buff()
                


        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
