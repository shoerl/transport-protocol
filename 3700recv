#!/usr/bin/env -S python3 -u

import argparse, socket, json, select, sys, zlib

class Receiver:
    """
    Class representing the Receiver in a Transport Protocol.
    """
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        # sequence num collection to track sequence numbers of received messages in order
        self.sequence_nums = [0]
        # message buffer to track which messages need to be verified received in order
        self.buffer = []
        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.log("Sending message '%s'" % message)
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(str(message) + "\n")
        sys.stderr.flush()

    def update_sequence_nums(self, msg):
        self.sequence_nums.append(msg["sequence_number"])

    def print_message(self, msg):
        # Print out the data to stdout
        print(msg["data"], end='', flush=True)
     
    def is_sequence_num_in_buff(self, sequence_num):
        """ 
        Checks whether the given sequence number is in the message buffer.
        """
        return any(sequence_num == msg["sequence_number"] for msg in self.buffer)

    def is_duplicate(self, msg):
        """
        Determines if the given message is a duplicate.
        """
        # checks if this message's sequence number is in this receiver's sequence numbers or in the buffer
        return msg["sequence_number"] in self.sequence_nums or self.is_sequence_num_in_buff(msg["sequence_number"])

    def is_out_of_order(self, msg):
        """
        Determines if the given message is out of order. 
        """
        return self.sequence_nums[-1] + 1 != msg["sequence_number"]

    def fix_out_of_order_with_buff(self):
        """
        Filters receiver's message buffer for messages received in correct order, and updates receiver's sequence
        number collection accordingly.
        """
        to_remove = []
        for msg in self.buffer:
            # if message in buffer is in order, add its number to the sequence num collection, print it, and mark to remove it
            if not self.is_out_of_order(msg):
                self.update_sequence_nums(msg)
                self.print_message(msg)
                to_remove.append(msg)
        # remove messages in buffer that are received in order
        for msg in to_remove:
            self.buffer.remove(msg)

    def msg_has_all_attributes(self, msg):
        """
        Determines if given message has 'type', 'data' 'sequence_number' and 'checksum' fields, used for message
        validity checks.
        """
        return 'type' in msg and 'data' in msg and 'sequence_number' in msg and 'checksum' in msg
    
    def msg_has_proper_checksum(self, msg):
        """ 
        Determines if given message has a correct checksum, for error detection.
        Note: This method removes the checksum attribute/field from the message
              (This is the only time we use it so no need to add it back)
        Args:
            msg - dict representing recieved message
        """
        cksum_rec = msg['checksum']
        msg.pop('checksum')
        # calculate checksum using zlib crc32 checksum method
        cksum_calc = zlib.crc32(json.dumps(msg).encode('utf-8'))
        # does the checksum recieved/advertised equal the calculated checksum?
        return cksum_rec == cksum_calc

    def run(self):
        """
        Entrypoint for the receiver. 
        """
        while True:
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                try:
                    msg = json.loads(data.decode('utf-8'))
                except:
                    # corrupted packet
                    continue

                # Corruption check - are all attributes present with a correct checksum?
                if not (self.msg_has_all_attributes(msg) and self.msg_has_proper_checksum(msg)):
                    self.log("Recieved corrupted message '%s'" % msg)
                    continue

                self.log("Received data message %s" % msg)

                # create ack message with checksum
                ack = { "type": "ack", "num": msg["sequence_number"] }
                # Add checksum field for crc 32bit integer checksum calculated over whole ack
                # (obviously excluding checksum field)
                ack["checksum"] = zlib.crc32(json.dumps(ack).encode('utf-8'))

                # Always send ACK unless it is corrupted packet
                # Note we send ACK's even if it is duplicate, as duplicates may be the result of lost ACK's or actual duplication
                # and it would be complicated to distinguish between the two accurately
                self.send(ack)

                # duplicate message, so continue
                if self.is_duplicate(msg):
                    self.log("Not printing message due to duplication '%s'" % msg)
                    continue
        
                # if out of order message, add to buffer and sort buffer
                if self.is_out_of_order(msg):
                    self.log("Not printing message currently due to out of order '%s'" % msg)
                    self.buffer.append(msg)
                    # If you wanted to scale this up / use with a LOT of packets doing the inserting with sorted list approach
                    # may be better instead of sorting this whole list everytime, but for our purposes/test cases the difference
                    # is negligable
                    self.buffer = sorted(self.buffer, key=lambda msg: msg["sequence_number"])
                    continue
    
                # we know this is a valid message and in the right order, so update sequence nums and print it
                self.update_sequence_nums(msg)
                self.print_message(msg)

                # Attempt to fix/print any previously out of order messages since our sequence numbers have been updated
                self.fix_out_of_order_with_buff()
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
