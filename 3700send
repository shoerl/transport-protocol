#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, random
from datetime import datetime

DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.sequence_number = 0
        self.current_window_size = 0
        self.max_window_size = 4
        self.sequence_num_to_ack = {}
        self.message_cache = []

    def log(self, message):
        sys.stderr.write(str(message) + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def decrease_window_size(self):
        # We recieved an ack back, so we know reciever recieved message, so take it out of our window
        # effectively making our window size smaller by 1
        self.current_window_size -= 1

    def increase_window_size(self):
        # We send a message out, so we have another message in our network, so increase window size by 1
        self.current_window_size += 1

    def update_waiting_status(self):
        # if our window size is under max, we must have recieved an ack, so slide window forward so we can send another
        if self.current_window_size < self.max_window_size:
            self.waiting = False
        # if our window size is our max, we don't have any room left in our window, so wait
        elif self.current_window_size == self.max_window_size:
            self.waiting = True
    
    def all_messages_acked(self):
        for ack_status in self.sequence_num_to_ack.values():
            if not ack_status:
                return False
        return True

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for idx, (msg, time) in enumerate(self.message_cache):
                # if we haven't recieved an ack and 
                if not self.sequence_num_to_ack[msg["sequence_number"]] and (datetime.now() - time).total_seconds() > 2:
                    self.log("Sending message '%s'" % msg)
                    self.send(msg)
                    self.message_cache[idx] = (msg, datetime.now())

            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    try:
                        msg = json.loads(k.decode('utf-8'))
                    except:
                        # corrupted packet
                        continue

                    if not ('type' in msg and 'num' in msg):
                        continue

                    self.log("Received message '%s'" % msg)

                    # If this is a duplicate ack, don't mess with window size or waiting status and just continue to next
                    if self.sequence_num_to_ack[msg["num"]]:
                        continue

                    self.decrease_window_size()
                    #TODO: delete msg from message cache since we know we got a valid ack back here
                    self.update_waiting_status()
                    self.sequence_num_to_ack[msg["num"]] = True

                elif conn == sys.stdin:
                    data = sys.stdin.read(DATA_SIZE)
                    # don't exit unless we have recieved an ACK back for every packet we have sent
                    if len(data) == 0 and self.current_window_size == 0:
                        self.log("All done!")
                        sys.exit(0)
                    # If no more data to send but haven't recieved ack back for everything, just continue
                    elif len(data) == 0:
                        continue
                
                    self.sequence_number = self.sequence_number + 1
                    msg = { "type": "msg", "data": data, "sequence_number": self.sequence_number }
                    cksum = sum(json.dumps(msg).encode('utf-8'))
                    msg['checksum'] = cksum
                    self.message_cache.append((msg, datetime.now()))
                    self.log("Sending message '%s'" % msg)
                    self.send(msg)
                    self.increase_window_size()
                    self.update_waiting_status()
                    self.sequence_num_to_ack[self.sequence_number] = False

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
