#!/usr/bin/env -S python3 -u

import argparse, socket, json, select, sys, zlib
from datetime import datetime

DATA_SIZE = 1375

class Sender:
    """
    Class representing the Sender in a Transport Protocol.
    """

    def __init__(self, host, port):
        """
        Initializes Sender.
        Args:
            host - str host to connect to
            port - int port to connect to
        """
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        # waiting status which we will use to effectively buffer our STDIN
        self.waiting = False
        # current sequence number
        self.sequence_number = 0
        # current window size (sliding window)
        self.current_window_size = 0
        # max window size (sliding window)
        self.max_window_size = 8
        # { Sequence number: bool representing whether we have recieved an ack for that sequence number }
        # Needs to be seperate from message cache for duplication detection
        self.sequence_num_to_ack = {}
        # { Sequence number: (message dict, time message was last sent, bool representing if packet has been retransmitted) }
        # Corresponds to data we need to keep track of before we recieve an ACK for said packet
        self.message_cache = {}
        # round trip time initializes at 1 second
        self.rtt = 1
        # time to timeout initializes at 2 * RTT seconds
        self.rto = 2

    def log(self, message):
        """
        Logs message to stderror
        Args:
            message - message we want to log
        """
        sys.stderr.write(str(message) + "\n")
        sys.stderr.flush()

    def send(self, message):
        """
        Sends message to host/port we store in class
        Args:
            message - JSON of message we are sending
        """
        self.log("Sending message '%s'" % message)
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def decrease_current_window_size(self):
        """
        Decrease our current window size by 1
        """
        # We recieved an ack back, so we know reciever recieved message, so take it out of our window
        # effectively making our window size smaller by 1
        self.current_window_size -= 1

    def increase_current_window_size(self):
        """
        Increase our current window size by 1
        """
        # We send a message out, so we have another message in our network, so increase window size by 1
        self.current_window_size += 1

    def decrease_max_window_size(self):
        """
        Decrease our max window size (multiplicative decrease)
        """
        self.max_window_size = self.max_window_size / 2

    def increase_max_window_size(self):
        """
        Increase our max window size (additive increase)
        """
        self.max_window_size += 1

    def update_waiting_status(self):
        """
        Update our waiting status by looking at our current window size in relation to
        our max window size.
        """
        # if our window size is under max, we must have recieved an ack, so slide window forward so we can send another
        if self.current_window_size < self.max_window_size:
            self.waiting = False
        # otherwise our current window size is equal to or above or max, so wait
        else:
            self.waiting = True

    def ack_has_all_attributes(self, ack):
        """
        Does the given ACK have all of the required attributes/fields present?
        Args:
            ack - dict representing ack message
        """
        return 'type' in ack and 'num' in ack and 'checksum' in ack

    def ack_has_proper_checksum(self, ack):
        """
        Does the given ACK have the checksum which it is advertising?
        Note: This method removes the checksum attribute/field from the ACK
              (This is the only time we use it so no need to add it back)
        Args:
            ack - dict representing ack message
        """
        cksum_rec = ack['checksum']
        ack.pop('checksum')
        # calculate checksum using zlib crc32 checksum method
        cksum_calc = zlib.crc32(json.dumps(ack).encode('utf-8'))
        # does the checksum recieved/advertised equal the calculated checksum?
        return cksum_rec == cksum_calc
        
    def is_duplicate_ack(self, ack):
        """
        Is the given ACK a duplicate?
        Args:
            ack - dict representing ack message
        """
        return self.sequence_num_to_ack[ack['num']]

    def has_been_retransmitted(self, sequence_num):
        """
        Has the packet associated with the given sequence number been retransmitted ever?
        Args:
            sequence_num - num representing sequence num
        """
        return self.message_cache[sequence_num][2]

    def update_rtt_and_rto(self, sequence_num):
        """
        Using packet associated with given sequence number, update the RTT and RTO using formula given in class
        Args:
            sequence_num - num representing sequence num (for looking up time sent in message cache)
        """
        # (.875 * current_rtt) + (.125 * (time_recieved - time_sent))
        self.rtt = (.875 * self.rtt) + (.125 * (datetime.now() - self.message_cache[sequence_num][1]).total_seconds())
        self.rto = 2 * self.rtt

    def retransmit_if_necessary(self):
        """
        Check if any packets need to be retransmitted and retransmit them if so
        """
        for sequence_num, (msg, time, retransmitted) in self.message_cache.items():
            # if we haven't recieved an ack and it has been longer than the time to wait (which is 2x the rtt)
            if not self.sequence_num_to_ack[sequence_num] and (datetime.now() - time).total_seconds() > self.rto:
                self.send(msg)
                # Update last sent time in message cache & flag it as being retransmitted so we can ignore it in RTT calculations
                self.message_cache[sequence_num] = (msg, datetime.now(), True)
                # We know a packet got dropped, so decrease max window size
                self.decrease_max_window_size()

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]

            # retransmit if necessary, we need to do this regardless of whether or not we have data to send / ACKS recieved
            self.retransmit_if_necessary()

            for conn in socks:
                # get message sent from sender's socket
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    try:
                        msg = json.loads(k.decode('utf-8'))
                    except:
                        # corrupted packet
                        continue

                    self.log("Received message '%s'" % msg)
                    
                    # Corrupted message check
                    if not (self.ack_has_all_attributes(msg) and self.ack_has_proper_checksum(msg)):
                        self.log("Ignoring message due to corruption '%s'" % msg)
                        continue
                    
                    # If this is a duplicate ack, don't mess with window size or waiting status and just continue to next
                    if self.is_duplicate_ack(msg):
                        self.log("Ignoring message due to duplication '%s'" % msg)
                        continue

                    # update window size and waiting status according to msg
                    self.decrease_current_window_size()
                    self.update_waiting_status()

                    # To signify that we have recieved an ack for this sequence number
                    self.sequence_num_to_ack[msg["num"]] = True
                    
                    # recieved new ack, update congestion window
                    self.increase_max_window_size()
    
                    # Only do rtt and rto calculations if it is a packet which hasn't been retransmitted            
                    if not self.has_been_retransmitted(msg['num']):
                        self.update_rtt_and_rto(msg['num'])

                    # Delete corresponding message from message cache since we got a valid ack for it 
                    self.message_cache.pop(msg['num'])

                elif conn == sys.stdin:
                    data = sys.stdin.read(DATA_SIZE)
                    # don't exit unless we have recieved an ACK back for every packet we have sent
                    if len(data) == 0 and self.current_window_size == 0:
                        self.log("All done!")
                        sys.exit(0)
                    # If no more data to send but haven't recieved ack back for everything, just continue
                    elif len(data) == 0:
                        continue
                
                    self.sequence_number = self.sequence_number + 1
                    msg = { "type": "msg", "data": data, "sequence_number": self.sequence_number }
                    # Add checksum field for crc 32bit integer checksum calculated over whole packet
                    # (obviously excluding checksum field)
                    msg['checksum'] = zlib.crc32(json.dumps(msg).encode('utf-8'))
                    # Add to message cache which is all the info we care about until it has been ACKed
                    # contains (message dict, time message was last sent, bool representing if packet has been retransmitted)
                    self.message_cache[msg['sequence_number']] = (msg, datetime.now(), False)

                    # send message
                    self.send(msg)

                    # increase current window size since we sent packet
                    self.increase_current_window_size()
                    # our current window size has changed, so update waiting status
                    self.update_waiting_status()
                    # we haven't recieved an ack back for this packet yet, so mark it as such
                    self.sequence_num_to_ack[self.sequence_number] = False
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
